<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage.Game</name>
    </assembly>
    <members>
        <member name="T:VRage.Components.IMyComponentAggregate">
            <summary>
            When creating a new aggregate component type, derive from this interface so that you can use extension methods
            AddComponent and RemoveComponent
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentAggregateExtensions.AttachComponent(VRage.Components.IMyComponentAggregate,VRage.Components.MyComponentBase)">
            <summary>
            Adds to list but doesn't change ownership
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentAggregateExtensions.DetachComponent(VRage.Components.IMyComponentAggregate,VRage.Components.MyComponentBase)">
            <summary>
            Removes from list, but doesn't change ownership
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentBase.SetContainer(VRage.Components.MyComponentContainer)">
            <summary>
            Sets the container of this component.
            Note that the component is not added to the container here! Therefore, use MyComponentContainer.Add(...) method and it
            will in turn call this method. Actually, you should seldom have the need to call this method yourself.
            </summary>
            <param name="container">The new container of the component</param>
        </member>
        <member name="M:VRage.Components.MyComponentBase.OnAddedToContainer">
            <summary>
            Gets called after the container of this component changes
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentBase.OnBeforeRemovedFromContainer">
            <summary>
            Gets called before the removal of this component from a container
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentBase.IsSerialized">
            <summary>
            Tells the component container serializer whether this component should be saved
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Components.MyComponentBase.ContainerBase">
            <summary>
            This cannot be named Container to not conflict with the definition of Container in MyEntityComponentBase.
            </summary>
        </member>
        <member name="M:VRage.Components.MyComponentContainer.Contains(System.Type)">
            <summary>
            Returns if any component is assignable from type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:VRage.Components.MyEntityComponentBase.ComponentTypeDebugString">
            <summary>
            Name of the base component type for debug purposes (e.g.: "Position")
            </summary>
        </member>
        <member name="M:VRage.Components.MyHierarchyComponentBase.GetTopMostParent(System.Type)">
            <summary>
            Return top most parent of this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.MyHierarchyComponentBase.AddChild(VRage.ModAPI.IMyEntity,System.Boolean,System.Boolean)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="preserveWorldPos">if set to <c>true</c> [preserve absolute position].</param>
        </member>
        <member name="M:VRage.Components.MyHierarchyComponentBase.RemoveChild(VRage.ModAPI.IMyEntity,System.Boolean)">
            <summary>
            Adds the child.
            </summary>
            <param name="child">The child.</param>
            <param name="preserveWorldPos">if set to <c>true</c> [preserve absolute position].</param>
        </member>
        <member name="P:VRage.Components.MyHierarchyComponentBase.Children">
            <summary>
            Gets the childs collection.
            </summary>
        </member>
        <member name="T:VRage.Components.MyPhysicsForceType">
            <summary>
            Force type applied to physic object.
            </summary>
        </member>
        <member name="F:VRage.Components.MyPhysicsForceType.APPLY_WORLD_IMPULSE_AND_WORLD_ANGULAR_IMPULSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Components.MyPhysicsForceType.ADD_BODY_FORCE_AND_BODY_TORQUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:VRage.Components.MyPhysicsComponentBase.ContactPointDelay">
            <summary>
            Must be set before creating rigid body
            </summary>
        </member>
        <member name="F:VRage.Components.MyPhysicsComponentBase.IsPhantom">
            <summary>
            Use something from Havok to detect this
            </summary>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.Close">
            <summary>
            Initializes a new instance of the <see cref="!:MyPhysicsBody"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.AddForce(VRage.Components.MyPhysicsForceType,System.Nullable{VRageMath.Vector3},System.Nullable{VRageMath.Vector3D},System.Nullable{VRageMath.Vector3})">
            <summary>
            Applies external force to the physics object.
            </summary>
            <param name="type">The type.</param>
            <param name="force">The force.</param>
            <param name="position">The position.</param>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.ApplyImpulse(VRageMath.Vector3,VRageMath.Vector3D)">
            <summary>
            Applies the impulse.
            </summary>
            <param name="dir">The dir.</param>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.ClearSpeed">
            <summary>
            Clears the speeds.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.Clear">
            <summary>
            Clear all dynamic values of physics object.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.DebugDraw">
            <summary>
            Debug draw of this physics object.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.Activate">
            <summary>
            Activates this rigid body in physics.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPhysicsComponentBase.Deactivate">
            <summary>
            Deactivates this rigid body in physics.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRage.Components.MyPhysicsComponentBase.ForceActivate" -->
        <member name="M:VRage.Components.MyPhysicsComponentBase.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.MaterialType">
            <summary>
            Gets or sets the type of the material.
            </summary>
            <value>
            The type of the material.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.IsStatic">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:MyGameRigidBody"/> is static.
            </summary>
            <value>
              <c>true</c> if static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.IsKinematic">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:MyGameRigidBody"/> is kinematic.
            </summary>
            <value>
              <c>true</c> if kinematic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="!:MyPhysicsBody"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.PlayCollisionCueEnabled">
            <summary>
            Gets or sets a value indicating whether [play collision cue enabled].
            </summary>
            <value>
            	<c>true</c> if [play collision cue enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.Mass">
            <summary>
            Gets or sets the mass.
            </summary>
            <value>
            The mass.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <value>
            The linear velocity.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>
            The linear damping.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>
            The angular damping.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.AngularVelocity">
            <summary>
            Gets or sets the angular velocity.
            </summary>
            <value>
            The angular velocity.
            </value>
        </member>
        <member name="P:VRage.Components.MyPhysicsComponentBase.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="F:VRage.Components.MyPositionComponentBase.m_invalidBox">
            <summary>
            Internal world matrix of entity.
            </summary>
        </member>
        <member name="F:VRage.Components.MyPositionComponentBase.m_localMatrix">
            <summary>
            Internal local matrix relative to parent of entity.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.SetWorldMatrix(VRageMath.MatrixD,System.Object,System.Boolean)">
            <summary>
            Sets the world matrix.
            </summary>
            <param name="worldMatrix">The world matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.SetLocalMatrix(VRageMath.MatrixD,System.Object)">
            <summary>
            Sets the local matrix.
            </summary>
            <param name="localMatrix">The local matrix.</param>
            <param name="source">The source object that caused this change or null when not important.</param>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.GetPosition">
            <summary>
            Gets the entity position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.SetPosition(VRageMath.Vector3D)">
            <summary>
            Sets the position.
            </summary>
            <param name="pos">The pos.</param>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.GetWorldMatrixNormalizedInv">
            <summary>
            Inverted world matrix of this physic object calculated on-demand (non cached).
            Use it whenever you want to do world-matrix transformations with this physic objects.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.UpdateWorldMatrix(System.Object)">
            <summary>
            Updates the world matrix (change caused by this entity)
            </summary>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.UpdateWorldMatrix(VRageMath.MatrixD@,System.Object)">
            <summary>
            Updates the world matrix (change caused by parent)
            </summary>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.UpdateWorldVolume">
            <summary>
            Updates the volume of this entity.
            </summary>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.UpdateAABBHr(VRageMath.BoundingBoxD@)">
            <summary>
            Update volume hr and of all children.
            </summary>
            <param name="volume"></param>
        </member>
        <member name="M:VRage.Components.MyPositionComponentBase.OnWorldPositionChanged(System.Object)">
            <summary>
            Called when [world position changed].
            </summary>
            <param name="source">The source object that caused this event.</param>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.WorldMatrix">
            <summary>
            World matrix of this physic object. Use it whenever you want to do world-matrix transformations with this physic objects.
            </summary>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.LocalMatrix">
            <summary>
            Gets or sets the local matrix.
            </summary>
            <value>
            The local matrix.
            </value>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.WorldAABB">
            <summary>
            Gets the world aabb.
            </summary>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.WorldVolume">
            <summary>
            Gets the world volume.
            </summary>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.WorldAABBHr">
            <summary>
            Gets the hiearchical box in world.
            </summary>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.WorldVolumeHr">
            <summary>
            Gets the hiearchical volume in world.
            </summary>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.LocalAABB">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.LocalAABBHr">
            <summary>
            Sets the local aabb.
            </summary>
            <value>
            The local aabb.
            </value>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.LocalVolume">
            <summary>
            Sets the local volume.
            </summary>
            <value>
            The local volume.
            </value>
        </member>
        <member name="P:VRage.Components.MyPositionComponentBase.LocalVolumeOffset">
            <summary>
            Gets or sets the local volume offset.
            </summary>
            <value>
            The local volume offset.
            </value>
        </member>
        <member name="P:VRage.Components.MyRenderComponentBase.ModelStorage">
            <summary>
            Used by game to store model here. In game this is always of type MyModel.
            Implementation should only store and return passed object.
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.MarkIdUsed(System.Int64)">
            <summary>
            This method is used when loading existing entity IDs to track the last generated ID
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.AddEntityWithId(VRage.ModAPI.IMyEntity)">
            <summary>
            Registers entity with given ID. Do not call this directly, it is called automatically
            when EntityID is first time assigned.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:VRage.MyEntityIdentifier.AllocateId(VRage.MyEntityIdentifier.ID_OBJECT_TYPE,VRage.MyEntityIdentifier.ID_ALLOCATION_METHOD)">
            <summary>
            Allocated new entity ID (won't add to list)
            Entity with this ID should be added immediatelly
            </summary>
        </member>
        <member name="M:VRage.MyEntityIdentifier.SwapRegisteredEntityId(VRage.ModAPI.IMyEntity,System.Int64,System.Int64)">
            <summary>
            Changes ID by which an entity is registered. Do not call this directly, it is called automatically when
            EntityID changes.
            </summary>
            <param name="entity">Entity whose ID has changed.</param>
            <param name="oldId">Old ID of the entity.</param>
            <param name="newId">New ID of the entity.</param>
        </member>
        <member name="P:VRage.MyEntityIdentifier.AllocationSuspended">
            <summary>
            Freezes allocating entity ids.
            This is important, because during load, no entity cannot allocate new id, because it could allocate id which already has entity which will be loaded soon.
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.Use(VRage.Game.Entity.UseObject.UseActionEnum,VRage.ModAPI.IMyEntity)">
            <summary>
            Uses object by specified action
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="M:VRage.Game.Entity.UseObject.IMyUseObject.GetActionInfo(VRage.Game.Entity.UseObject.UseActionEnum)">
            <summary>
            Gets action text
            Caller calls this method only on supported actions
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.InteractiveDistance">
            <summary>
            Consider object as being in interactive range only if distance from character is smaller or equal to this value
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ActivationMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.WorldMatrix">
            <summary>
            Matrix of object, scale represents size of object
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.RenderObjectID">
            <summary>
            Render ID of objects 
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ShowOverlay">
            <summary>
            Show overlay (semitransparent bounding box)
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.SupportedActions">
            <summary>
            Returns supported actions
            </summary>
        </member>
        <member name="P:VRage.Game.Entity.UseObject.IMyUseObject.ContinuousUsage">
            <summary>
            When true, use will be called every frame
            </summary>
        </member>
        <member name="T:VRage.ModAPI.EntityFlags">
            <summary>
            Entity flags.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Visible">
            <summary>
            Specifies whether draw this entity or not.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Save">
            <summary>
            Specifies whether save entity when saving sector or not
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Near">
            <summary>
            Specifies whether entity is "near", near entities are cockpit and weapons, these entities are rendered in special way
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdate">
            <summary>
            On this entity and its children will be called UpdateBeforeSimulation and UpdateAfterSimulation each frame
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsDraw">
            <summary>
            Draw method of this entity will be called when suitable
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.InvalidateOnMove">
            <summary>
            If object is moved, invalidate its renderobjects (update render)
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Sync">
            <summary>
            Synchronize object during multiplayer
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsDrawFromParent">
            <summary>
            Draw method of this entity will be called when suitable and only from parent
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.ShadowBoxLod">
            <summary>
            Draw LOD shadow as box
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.Transparent">
            <summary>
            Render the entity using dithering to simulate transparency
            </summary>
        </member>
        <member name="F:VRage.ModAPI.EntityFlags.NeedsUpdateBeforeNextFrame">
            <summary>
            Entity updated once before first frame.
            </summary>
        </member>
        <member name="F:VRage.ModAPI.MyEntityUpdateEnum.BEFORE_NEXT_FRAME">
            <summary>
            Separate update performed once before any other updates are called.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.RemapEntityId(System.Int64)">
            <summary>
            Returns a new entity ID for the entity with the given old entity ID.
            The function will return the same new entityId only if the saveMapping argument is set to true.
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.RemapGroupId(System.String,System.Int32)">
            <summary>
            Returns a new ID for the given old ID for specific group (multiblockIDs, ...).
            </summary>
        </member>
        <member name="M:VRage.ModAPI.IMyRemapHelper.Clear">
            <summary>
            Clears all the saved mappings from the remap helper and gets it ready for the next remapping operation.
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.DisplayNameEnum">
            <summary>
            Enum used for localization of display name. Null for player created definitions.
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.DescriptionEnum">
            <summary>
            Enum used for localization of description. Null for player created definitions.
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.DisplayNameString">
            <summary>
            String name used for user created definitions which do not have localization support.
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.DescriptionString">
            <summary>
            String used for user created description which do not have localization support.
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.Enabled">
            <summary>
            Definition can be disabled by mod, then it will be removed from definition manager
            </summary>
        </member>
        <member name="F:Sandbox.Definitions.MyDefinitionBase.Public">
            <summary>
            Indicates if definition should be offered in Cube builder
            </summary>
        </member>
        <member name="P:Sandbox.Definitions.MyDefinitionBase.DisplayNameText">
            <summary>
            Use this property when showing name in GUI instead of DisplayName. This takes into
            account more complex name construction.
            </summary>
        </member>
        <member name="P:Sandbox.Definitions.MyDefinitionBase.DescriptionText">
            <summary>
            Use this property when showing description in GUI, as it takes into account more
            complex description construction.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.BlueprintItem.Amount">
            <summary>
            Amount of item required or produced. For discrete objects this refers to
            pieces. For ingots and ore, this refers to volume in m^3.
            </summary>
        </member>
        <member name="T:Sandbox.Definitions.MyDefinitionId">
            <summary>
            Prefer getting definition ID using object builder used to create the item.
            If you have automatic rifle, in its Init method create new MyDefinitionId
            using TypeId and SubtypeName of object builder.
            Do not write specific values in code, as data comes from XML and if those
            change, code needs to change as well.
            </summary>
        </member>
        <member name="M:Sandbox.Definitions.MyDefinitionId.GetHashCodeLong">
            <summary>
            Safer hash code. It is unique in more situations than GetHashCode would be,
            but it may still require full check.
            </summary>
            <returns>64-bit hash code.</returns>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_CubeBlockDefinition.Variant.Color">
            <summary>
            Color is used to get Color(4 bytes) as well as
            MyStringId value for localization.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_AdvancedDoorDefinition.Opening.MaxOpen">
            <summary>
            For Sliding Parts = value in meter
            For Rotating Parts = value in Degrees
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_AdvancedDoorDefinition.Opening.PivotPosition">
            <summary>
            override the Pivot/Hinge for this opening
            will be read from Model if not defined
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_AdvancedDoorDefinition.SubpartDefinition.Name">
            <summary>
            Name of the Subpart Model without extension i.e.:
            "DoorLeft" will be "path/to/model/DoorLeft.mwm"
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_AdvancedDoorDefinition.SubpartDefinition.PivotPosition">
            <summary>
            define the Pivot/Hinge position for this Subpart
            will be read from Model if not defined
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_BlueprintDefinition.Result">
            <summary>
            THIS IS OBSOLETE
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_BlueprintDefinition.BaseProductionTimeInSeconds">
            <summary>
            Base production time in seconds, which is affected by speed increase of
            refinery or assembler.
            </summary>
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_CogWheelBlockDefinition">
            <summary>
            Definition for one small grid cog wheel (used inside large block as mechanical subblock).
            </summary>
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_MechanicalSubBlockDefinition">
            <summary>
            Definition for common subblock mechanical parts.
            </summary>
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_CogWheelsBlockDefinition">
            <summary>
            Definition for large grid block which consists of several connected small grid cog wheel subblocks.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyAutorotateMode.OneDirection">
            <summary>
            When block has mount points only on one side, it will autorotate so that side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyAutorotateMode.OppositeDirections">
            <summary>
            When block has mount points only on two sides and those sides are opposite each other (eg. Top and Bottom),
            it will autorotate so that one of these sides is touching the surface. Otherwise, full range of rotations
            is allowed.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyAutorotateMode.FirstDirection">
            <summary>
            When block has mountpoint on at least one side, it will autorotate so that this side is touching the surface.
            Otherwise, full range of rotations is allowed.
            </summary>
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyGlobalEventTypeEnum">
            <summary>
            Defines the event type.
            Each event type has its assigned handler method and data class type.
            Multiple event definitions can have the same event type.
            </summary>
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_LockBlockDefinition">
            <summary>
            Definition for one small grid lock block (used inside large block as mechanical subblock).
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_OxygenContainerObject.OxygenLevel">
            <summary>
            This is not synced automatically
            Call SyncOxygenContainerLevel on inventory to sync it
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.Definitions.MyPlanetMaterialDefinition.HasLayers">
            Weather this material has layers.
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyPlanetMaterialPlacementRule">
            Important!
            
            Due to the geometry in question the slope is stored as the cosine (used in dot product).
            
            Meanwhile the dot product for the latitude yields the cosine of the modulus of the compliment of our angle.
            This means after the maths are done that what we have is the *sine*, so the latitude is stored as the sine.
        </member>
        <member name="M:Sandbox.Common.ObjectBuilders.Definitions.MyPlanetMaterialPlacementRule.Check(System.Single,System.Single,System.Single)">
            Check that a rule matches terrain properties.
            
            @param height Height ration to the height map.
            @param latitude Latitude cosine
            @param slope Surface dominant angle sine.
        </member>
        <member name="M:Sandbox.Common.ObjectBuilders.Definitions.MyPlanetSurfaceRule.Check(System.Single,System.Single,System.Single)">
            Check that a rule matches terrain properties.
            
            @param height Height ration to the height map.
            @param latitude Latitude cosine
            @param slope Surface dominant angle cosine.
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyPlanetMaterialGroup">
            Rule group defines a material mappable set of surface rules.
        </member>
        <member name="M:Sandbox.Common.ObjectBuilders.Definitions.MyRangedValue.ConvertToCosine">
            When the range is an angle this method changes it to the cosines of the angle.
            
            The angle is expected to be in degrees.
            
            Also beware that cosine is a decreasing function in [0,90], for that reason the minimum and maximum are swaped.
            
        </member>
        <member name="M:Sandbox.Common.ObjectBuilders.Definitions.MyRangedValue.ConvertToSine">
            When the range is an angle this method changes it to the sines of the angle.
            
            The angle is expected to be in degrees.
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_SwitchBlockDefinition">
            <summary>
            Definition for one small grid switch block (used inside large block as mechanical subblock).
            </summary>
        </member>
        <member name="T:Medieval.ObjectBuilders.Definitions.MyObjectBuilder_TorsionSpringBlockDefinition">
            <summary>
            Definition for one small grid torsion spring (used inside large block as mechanical subblock).
            </summary>
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModifierType">
            <summary>
            Upgrade modifier type
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModifierType.Multiplicative">
            <summary>
            Multiplies base value of block - to increase value by 50% set <see cref="P:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier"/> to 1.5
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModifierType.Additive">
            <summary>
            Adds to base value of block - to increase value by 50% set <see cref="P:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier"/> to 0.5
            </summary>
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo">
            <summary>
            Module upgrade information
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo.UpgradeType">
            <summary>
            Name of upgrade
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo.Modifier">
            <summary>
            Modifier for upgrade (as decimal - 1 = 100%)
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo.ModifierType">
            <summary>
            Type of modifier as <see cref="T:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModifierType"/>
            </summary>
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_UpgradeModuleDefinition">
            <summary>
            Upgrade module base definition
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.Definitions.MyObjectBuilder_UpgradeModuleDefinition.Upgrades">
            <summary>
            List of upgrades provided by block <see cref="T:Sandbox.Common.ObjectBuilders.Definitions.MyUpgradeModuleInfo"/>
            </summary>
        </member>
        <member name="F:VRage.Game.ObjectBuilders.MyComponentBlockEntry.Main">
            <summary>
            Whether the given block should be used when spawning the component which it contains
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilder_EntityBase.Remap(VRage.ModAPI.IMyRemapHelper)">
            <summary>
            Remaps this entity's entityId to a new value.
            If there are cross-referenced between different entities in this object builder, the remapHelper should be used to rememeber these
            references and retrieve them.
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.MyObjectBuilder_ProductionBlock.Inventory">
            <summary>
            Don't use. Backward compatibility only. Use InputInventory and OutputInventory instead.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_Checkpoint.ElapsedGameTime">
            <summary>
            This is long because TimeSpan is not serialized
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.MyObjectBuilder_Checkpoint.GameTime">
            <summary>
            Obsolete. Use ElapsedGameTime
            </summary>
        </member>
        <member name="P:Sandbox.Common.ObjectBuilders.MyObjectBuilder_InventoryItem.Content">
            <summary>
            Obsolete. It is here only to keep backwards compatibility with old saves
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_SessionSettings.WorldSizeKm">
            <summary>
            Size of the edge of the world area cube.
            Don't use directly, as it is error-prone (it's km instead of m and edge size instead of half-extent)
            Rather use MyEntities.WorldHalfExtent()
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_RemoteControl.Coords">
            <summary>
            Obsolete. Use Waypoints instead.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_RemoteControl.Names">
            <summary>
            Obsolete. Use Waypoints instead.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_RemoteControl.AutoPilotToolbar">
            <summary>
            Obsolete. Use Waypoints instead.
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyObjectBuilder_ShipConnector.Connected">
            <summary>
            When ConnectedEntityId is not null, this tells whether the connection is only approach (yellow) or locked connection (green)
            </summary>
        </member>
        <member name="F:Sandbox.Common.ObjectBuilders.MyToolbarType.Spectator">
            <summary>
            This is character toolbar that allows building everything.
            </summary>
        </member>
        <member name="T:Sandbox.Common.ObjectBuilders.GameRelationAttribute">
            <summary>
            This class is here only to distinguish fields in SessionSettings
            Will be removed after correct hierarchy and usage of session settings is made
            </summary>
        </member>
        <member name="M:Sandbox.Common.MyAbstractXmlSerializer`1.#ctor">
            <summary>
            **DO NOT USE** This is only added to enable XML Serialization.
            </summary>
            <remarks>DO NOT USE THIS CONSTRUCTOR</remarks>
        </member>
        <member name="M:Sandbox.Common.MyAbstractXmlSerializer`1.#ctor(`0)">
            <summary>
            Initialises the Serializer to work with the given data.
            </summary>
            <param name="data">Concrete Object of the AbstractType Specified.</param>
        </member>
        <member name="P:Sandbox.Common.MyAbstractXmlSerializer`1.Data">
            <summary>
            [Concrete] Data to be stored/is stored as XML.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderSerializer.MemberwiseAssignment(VRage.ObjectBuilders.MyObjectBuilder_Base,VRage.ObjectBuilders.MyObjectBuilder_Base)">
            <summary>
            Performs shallow copy of data between members of the same name and type from source to target.
            This method can be slow and inefficient, so use only when needed.
            </summary>
        </member>
        <member name="M:VRage.ObjectBuilders.MyObjectBuilderType.ParseBackwardsCompatible(System.String)">
            <summary>
            Can handle old values as well.
            </summary>
        </member>
    </members>
</doc>
